import numpy as np

def lk_poisson_3d():
    """
    Create element stiffness matrix for 3D Poisson with bilinear
    quadrilateral elements. Taken from the standard Sigmund textbook.
    
    Returns
    -------
    Ke : np.ndarray, shape (8,8)
        element stiffness matrix.
        
    """
    Ke = np.array([[2/3, 0, -1/6, 0, 0, -1/6, -1/6, -1/6], 
                   [0, 2/3, 0, -1/6, -1/6, 0, -1/6, -1/6], 
                   [-1/6, 0, 2/3, 0, -1/6, -1/6, 0, -1/6], 
                   [0, -1/6, 0, 2/3, -1/6, -1/6, -1/6, 0], 
                   [0, -1/6, -1/6, -1/6, 2/3, 0, -1/6, 0], 
                   [-1/6, 0, -1/6, -1/6, 0, 2/3, 0, -1/6], 
                   [-1/6, -1/6, 0, -1/6, -1/6, 0, 2/3, 0], 
                   [-1/6, -1/6, -1/6, 0, 0, -1/6, 0, 2/3]])
    return Ke

def lk_poisson_aniso_3d(k):
    """
    Create element stiffness matrix for anisotropic 3D Poisson with bilinear
    quadrilateral elements. Taken from the standard Sigmund textbook.
    
    Parameters
    ----------
    k : np.ndarray, shape (3,3)
        anisotropic heat conductivity. If isotropic k would be 
        [[k,0,0],[0,k,0],[0,0,k]].
        
    Returns
    -------
    Ke : np.ndarray, shape (8,8)
        element stiffness matrix.
        
    """
    Ke = np.array([[2*k[0,0]/9 + k[0,1]/6 + k[0,2]/6 + k[1,0]/6 + 2*k[1,1]/9 + k[1,2]/6 + k[2,0]/6 + k[2,1]/6 + 2*k[2,2]/9, 
                    -2*k[0,0]/9 + k[0,1]/6 + k[0,2]/6 - k[1,0]/6 + k[1,1]/9 + k[1,2]/12 - k[2,0]/6 + k[2,1]/12 + k[2,2]/9, 
                    -k[0,0]/9 - k[0,1]/6 + k[0,2]/12 - k[1,0]/6 - k[1,1]/9 + k[1,2]/12 - k[2,0]/12 - k[2,1]/12 + k[2,2]/18, 
                    k[0,0]/9 - k[0,1]/6 + k[0,2]/12 + k[1,0]/6 - 2*k[1,1]/9 + k[1,2]/6 + k[2,0]/12 - k[2,1]/6 + k[2,2]/9, 
                    k[0,0]/9 + k[0,1]/12 - k[0,2]/6 + k[1,0]/12 + k[1,1]/9 - k[1,2]/6 + k[2,0]/6 + k[2,1]/6 - 2*k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/12 - k[0,2]/6 - k[1,0]/12 + k[1,1]/18 - k[1,2]/12 - k[2,0]/6 + k[2,1]/12 - k[2,2]/9, 
                    -k[0,0]/18 - k[0,1]/12 - k[0,2]/12 - k[1,0]/12 - k[1,1]/18 - k[1,2]/12 - k[2,0]/12 - k[2,1]/12 - k[2,2]/18, 
                    k[0,0]/18 - k[0,1]/12 - k[0,2]/12 + k[1,0]/12 - k[1,1]/9 - k[1,2]/6 + k[2,0]/12 - k[2,1]/6 - k[2,2]/9], 
                   [-2*k[0,0]/9 - k[0,1]/6 - k[0,2]/6 + k[1,0]/6 + k[1,1]/9 + k[1,2]/12 + k[2,0]/6 + k[2,1]/12 + k[2,2]/9, 
                    2*k[0,0]/9 - k[0,1]/6 - k[0,2]/6 - k[1,0]/6 + 2*k[1,1]/9 + k[1,2]/6 - k[2,0]/6 + k[2,1]/6 + 2*k[2,2]/9, 
                    k[0,0]/9 + k[0,1]/6 - k[0,2]/12 - k[1,0]/6 - 2*k[1,1]/9 + k[1,2]/6 - k[2,0]/12 - k[2,1]/6 + k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/6 - k[0,2]/12 + k[1,0]/6 - k[1,1]/9 + k[1,2]/12 + k[2,0]/12 - k[2,1]/12 + k[2,2]/18, 
                    -k[0,0]/9 - k[0,1]/12 + k[0,2]/6 + k[1,0]/12 + k[1,1]/18 - k[1,2]/12 + k[2,0]/6 + k[2,1]/12 - k[2,2]/9, 
                    k[0,0]/9 - k[0,1]/12 + k[0,2]/6 - k[1,0]/12 + k[1,1]/9 - k[1,2]/6 - k[2,0]/6 + k[2,1]/6 - 2*k[2,2]/9, 
                    k[0,0]/18 + k[0,1]/12 + k[0,2]/12 - k[1,0]/12 - k[1,1]/9 - k[1,2]/6 - k[2,0]/12 - k[2,1]/6 - k[2,2]/9, 
                    -k[0,0]/18 + k[0,1]/12 + k[0,2]/12 + k[1,0]/12 - k[1,1]/18 - k[1,2]/12 + k[2,0]/12 - k[2,1]/12 - k[2,2]/18], 
                   [-k[0,0]/9 - k[0,1]/6 - k[0,2]/12 - k[1,0]/6 - k[1,1]/9 - k[1,2]/12 + k[2,0]/12 + k[2,1]/12 + k[2,2]/18, 
                    k[0,0]/9 - k[0,1]/6 - k[0,2]/12 + k[1,0]/6 - 2*k[1,1]/9 - k[1,2]/6 - k[2,0]/12 + k[2,1]/6 + k[2,2]/9, 
                    2*k[0,0]/9 + k[0,1]/6 - k[0,2]/6 + k[1,0]/6 + 2*k[1,1]/9 - k[1,2]/6 - k[2,0]/6 - k[2,1]/6 + 2*k[2,2]/9, 
                    -2*k[0,0]/9 + k[0,1]/6 - k[0,2]/6 - k[1,0]/6 + k[1,1]/9 - k[1,2]/12 + k[2,0]/6 - k[2,1]/12 + k[2,2]/9, 
                    -k[0,0]/18 - k[0,1]/12 + k[0,2]/12 - k[1,0]/12 - k[1,1]/18 + k[1,2]/12 + k[2,0]/12 + k[2,1]/12 - k[2,2]/18, 
                    k[0,0]/18 - k[0,1]/12 + k[0,2]/12 + k[1,0]/12 - k[1,1]/9 + k[1,2]/6 - k[2,0]/12 + k[2,1]/6 - k[2,2]/9, 
                    k[0,0]/9 + k[0,1]/12 + k[0,2]/6 + k[1,0]/12 + k[1,1]/9 + k[1,2]/6 - k[2,0]/6 - k[2,1]/6 - 2*k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/12 + k[0,2]/6 - k[1,0]/12 + k[1,1]/18 + k[1,2]/12 + k[2,0]/6 - k[2,1]/12 - k[2,2]/9], 
                   [k[0,0]/9 + k[0,1]/6 + k[0,2]/12 - k[1,0]/6 - 2*k[1,1]/9 - k[1,2]/6 + k[2,0]/12 + k[2,1]/6 + k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/6 + k[0,2]/12 + k[1,0]/6 - k[1,1]/9 - k[1,2]/12 - k[2,0]/12 + k[2,1]/12 + k[2,2]/18, 
                    -2*k[0,0]/9 - k[0,1]/6 + k[0,2]/6 + k[1,0]/6 + k[1,1]/9 - k[1,2]/12 - k[2,0]/6 - k[2,1]/12 + k[2,2]/9, 
                    2*k[0,0]/9 - k[0,1]/6 + k[0,2]/6 - k[1,0]/6 + 2*k[1,1]/9 - k[1,2]/6 + k[2,0]/6 - k[2,1]/6 + 2*k[2,2]/9, 
                    k[0,0]/18 + k[0,1]/12 - k[0,2]/12 - k[1,0]/12 - k[1,1]/9 + k[1,2]/6 + k[2,0]/12 + k[2,1]/6 - k[2,2]/9, 
                    -k[0,0]/18 + k[0,1]/12 - k[0,2]/12 + k[1,0]/12 - k[1,1]/18 + k[1,2]/12 - k[2,0]/12 + k[2,1]/12 - k[2,2]/18, 
                    -k[0,0]/9 - k[0,1]/12 - k[0,2]/6 + k[1,0]/12 + k[1,1]/18 + k[1,2]/12 - k[2,0]/6 - k[2,1]/12 - k[2,2]/9, 
                    k[0,0]/9 - k[0,1]/12 - k[0,2]/6 - k[1,0]/12 + k[1,1]/9 + k[1,2]/6 + k[2,0]/6 - k[2,1]/6 - 2*k[2,2]/9], 
                   [k[0,0]/9 + k[0,1]/12 + k[0,2]/6 + k[1,0]/12 + k[1,1]/9 + k[1,2]/6 - k[2,0]/6 - k[2,1]/6 - 2*k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/12 + k[0,2]/6 - k[1,0]/12 + k[1,1]/18 + k[1,2]/12 + k[2,0]/6 - k[2,1]/12 - k[2,2]/9, 
                    -k[0,0]/18 - k[0,1]/12 + k[0,2]/12 - k[1,0]/12 - k[1,1]/18 + k[1,2]/12 + k[2,0]/12 + k[2,1]/12 - k[2,2]/18, 
                    k[0,0]/18 - k[0,1]/12 + k[0,2]/12 + k[1,0]/12 - k[1,1]/9 + k[1,2]/6 - k[2,0]/12 + k[2,1]/6 - k[2,2]/9, 
                    2*k[0,0]/9 + k[0,1]/6 - k[0,2]/6 + k[1,0]/6 + 2*k[1,1]/9 - k[1,2]/6 - k[2,0]/6 - k[2,1]/6 + 2*k[2,2]/9, 
                    -2*k[0,0]/9 + k[0,1]/6 - k[0,2]/6 - k[1,0]/6 + k[1,1]/9 - k[1,2]/12 + k[2,0]/6 - k[2,1]/12 + k[2,2]/9, 
                    -k[0,0]/9 - k[0,1]/6 - k[0,2]/12 - k[1,0]/6 - k[1,1]/9 - k[1,2]/12 + k[2,0]/12 + k[2,1]/12 + k[2,2]/18, 
                    k[0,0]/9 - k[0,1]/6 - k[0,2]/12 + k[1,0]/6 - 2*k[1,1]/9 - k[1,2]/6 - k[2,0]/12 + k[2,1]/6 + k[2,2]/9], 
                   [-k[0,0]/9 - k[0,1]/12 - k[0,2]/6 + k[1,0]/12 + k[1,1]/18 + k[1,2]/12 - k[2,0]/6 - k[2,1]/12 - k[2,2]/9, 
                    k[0,0]/9 - k[0,1]/12 - k[0,2]/6 - k[1,0]/12 + k[1,1]/9 + k[1,2]/6 + k[2,0]/6 - k[2,1]/6 - 2*k[2,2]/9, 
                    k[0,0]/18 + k[0,1]/12 - k[0,2]/12 - k[1,0]/12 - k[1,1]/9 + k[1,2]/6 + k[2,0]/12 + k[2,1]/6 - k[2,2]/9, 
                    -k[0,0]/18 + k[0,1]/12 - k[0,2]/12 + k[1,0]/12 - k[1,1]/18 + k[1,2]/12 - k[2,0]/12 + k[2,1]/12 - k[2,2]/18, 
                    -2*k[0,0]/9 - k[0,1]/6 + k[0,2]/6 + k[1,0]/6 + k[1,1]/9 - k[1,2]/12 - k[2,0]/6 - k[2,1]/12 + k[2,2]/9, 
                    2*k[0,0]/9 - k[0,1]/6 + k[0,2]/6 - k[1,0]/6 + 2*k[1,1]/9 - k[1,2]/6 + k[2,0]/6 - k[2,1]/6 + 2*k[2,2]/9, 
                    k[0,0]/9 + k[0,1]/6 + k[0,2]/12 - k[1,0]/6 - 2*k[1,1]/9 - k[1,2]/6 + k[2,0]/12 + k[2,1]/6 + k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/6 + k[0,2]/12 + k[1,0]/6 - k[1,1]/9 - k[1,2]/12 - k[2,0]/12 + k[2,1]/12 + k[2,2]/18], 
                   [-k[0,0]/18 - k[0,1]/12 - k[0,2]/12 - k[1,0]/12 - k[1,1]/18 - k[1,2]/12 - k[2,0]/12 - k[2,1]/12 - k[2,2]/18, 
                    k[0,0]/18 - k[0,1]/12 - k[0,2]/12 + k[1,0]/12 - k[1,1]/9 - k[1,2]/6 + k[2,0]/12 - k[2,1]/6 - k[2,2]/9, 
                    k[0,0]/9 + k[0,1]/12 - k[0,2]/6 + k[1,0]/12 + k[1,1]/9 - k[1,2]/6 + k[2,0]/6 + k[2,1]/6 - 2*k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/12 - k[0,2]/6 - k[1,0]/12 + k[1,1]/18 - k[1,2]/12 - k[2,0]/6 + k[2,1]/12 - k[2,2]/9, 
                    -k[0,0]/9 - k[0,1]/6 + k[0,2]/12 - k[1,0]/6 - k[1,1]/9 + k[1,2]/12 - k[2,0]/12 - k[2,1]/12 + k[2,2]/18, 
                    k[0,0]/9 - k[0,1]/6 + k[0,2]/12 + k[1,0]/6 - 2*k[1,1]/9 + k[1,2]/6 + k[2,0]/12 - k[2,1]/6 + k[2,2]/9, 
                    2*k[0,0]/9 + k[0,1]/6 + k[0,2]/6 + k[1,0]/6 + 2*k[1,1]/9 + k[1,2]/6 + k[2,0]/6 + k[2,1]/6 + 2*k[2,2]/9, 
                    -2*k[0,0]/9 + k[0,1]/6 + k[0,2]/6 - k[1,0]/6 + k[1,1]/9 + k[1,2]/12 - k[2,0]/6 + k[2,1]/12 + k[2,2]/9], 
                   [k[0,0]/18 + k[0,1]/12 + k[0,2]/12 - k[1,0]/12 - k[1,1]/9 - k[1,2]/6 - k[2,0]/12 - k[2,1]/6 - k[2,2]/9, 
                    -k[0,0]/18 + k[0,1]/12 + k[0,2]/12 + k[1,0]/12 - k[1,1]/18 - k[1,2]/12 + k[2,0]/12 - k[2,1]/12 - k[2,2]/18, 
                    -k[0,0]/9 - k[0,1]/12 + k[0,2]/6 + k[1,0]/12 + k[1,1]/18 - k[1,2]/12 + k[2,0]/6 + k[2,1]/12 - k[2,2]/9, 
                    k[0,0]/9 - k[0,1]/12 + k[0,2]/6 - k[1,0]/12 + k[1,1]/9 - k[1,2]/6 - k[2,0]/6 + k[2,1]/6 - 2*k[2,2]/9, 
                    k[0,0]/9 + k[0,1]/6 - k[0,2]/12 - k[1,0]/6 - 2*k[1,1]/9 + k[1,2]/6 - k[2,0]/12 - k[2,1]/6 + k[2,2]/9, 
                    -k[0,0]/9 + k[0,1]/6 - k[0,2]/12 + k[1,0]/6 - k[1,1]/9 + k[1,2]/12 + k[2,0]/12 - k[2,1]/12 + k[2,2]/18, 
                    -2*k[0,0]/9 - k[0,1]/6 - k[0,2]/6 + k[1,0]/6 + k[1,1]/9 + k[1,2]/12 + k[2,0]/6 + k[2,1]/12 + k[2,2]/9, 
                    2*k[0,0]/9 - k[0,1]/6 - k[0,2]/6 - k[1,0]/6 + 2*k[1,1]/9 + k[1,2]/6 - k[2,0]/6 + k[2,1]/6 + 2*k[2,2]/9]])
    return Ke
