import numpy as np 

def lk_linear_elast_2d(E=1,nu=0.3):
    """
    Create element stiffness matrix for 2D isotropic linear elasticity with 
    bilinear quadrilateral Lagrangian elements in plane stress.
    
    Parameters
    ----------
    E : float
        Young's modulus.
    nu : float
        Poisson' ratio.
    
    Returns
    -------
    Ke : np.ndarray, shape (8,8)
        element stiffness matrix.
        
    """
    k = np.array([1/2-nu/6, 1/8+nu/8, -1/4-nu/12, -1/8+3*nu /
                 8, -1/4+nu/12, -1/8-nu/8, nu/6, 1/8-3*nu/8])
    Ke = E/(1-nu**2)*np.array([[k[0], k[1], k[2], k[3], k[4], k[5], k[6], k[7]],
                               [k[1], k[0], k[7], k[6], k[5], k[4], k[3], k[2]],
                               [k[2], k[7], k[0], k[5], k[6], k[3], k[4], k[1]],
                               [k[3], k[6], k[5], k[0], k[7], k[2], k[1], k[4]],
                               [k[4], k[5], k[6], k[7], k[0], k[1], k[2], k[3]],
                               [k[5], k[4], k[3], k[2], k[1], k[0], k[7], k[6]],
                               [k[6], k[3], k[4], k[1], k[2], k[7], k[0], k[5]],
                               [k[7], k[2], k[1], k[4], k[3], k[6], k[5], k[0]]])
    return Ke

def lk_linear_elast_aniso_2d(c):
    """
    Create element stiffness matrix for 2D anisotropic linear elasticity with 
    bilinear quadrilateral elements.
    
    Parameters
    ----------
    c : np.ndarray, shape (3,3)
        stiffness tensor.
    
    Returns
    -------
    Ke : np.ndarray, shape (8,8)
        element stiffness matrix.
        
    """
    Ke = np.array([[c[0,0]/3 + c[0,2]/4 + c[2,0]/4 + c[2,2]/3, 
                    c[0,1]/4 + c[0,2]/3 + c[2,1]/3 + c[2,2]/4, 
                    -c[0,0]/3 + c[0,2]/4 - c[2,0]/4 + c[2,2]/6, 
                    c[0,1]/4 - c[0,2]/3 + c[2,1]/6 - c[2,2]/4, 
                    -c[0,0]/6 - c[0,2]/4 - c[2,0]/4 - c[2,2]/6, 
                    -c[0,1]/4 - c[0,2]/6 - c[2,1]/6 - c[2,2]/4, 
                    c[0,0]/6 - c[0,2]/4 + c[2,0]/4 - c[2,2]/3, 
                    -c[0,1]/4 + c[0,2]/6 - c[2,1]/3 + c[2,2]/4], 
                   [c[1,0]/4 + c[1,2]/3 + c[2,0]/3 + c[2,2]/4, 
                    c[1,1]/3 + c[1,2]/4 + c[2,1]/4 + c[2,2]/3, 
                    -c[1,0]/4 + c[1,2]/6 - c[2,0]/3 + c[2,2]/4, 
                    c[1,1]/6 - c[1,2]/4 + c[2,1]/4 - c[2,2]/3, 
                    -c[1,0]/4 - c[1,2]/6 - c[2,0]/6 - c[2,2]/4, 
                    -c[1,1]/6 - c[1,2]/4 - c[2,1]/4 - c[2,2]/6, 
                    c[1,0]/4 - c[1,2]/3 + c[2,0]/6 - c[2,2]/4, 
                    -c[1,1]/3 + c[1,2]/4 - c[2,1]/4 + c[2,2]/6], 
                   [-c[0,0]/3 - c[0,2]/4 + c[2,0]/4 + c[2,2]/6, 
                    -c[0,1]/4 - c[0,2]/3 + c[2,1]/6 + c[2,2]/4, 
                    c[0,0]/3 - c[0,2]/4 - c[2,0]/4 + c[2,2]/3, 
                    -c[0,1]/4 + c[0,2]/3 + c[2,1]/3 - c[2,2]/4, 
                    c[0,0]/6 + c[0,2]/4 - c[2,0]/4 - c[2,2]/3, 
                    c[0,1]/4 + c[0,2]/6 - c[2,1]/3 - c[2,2]/4, 
                    -c[0,0]/6 + c[0,2]/4 + c[2,0]/4 - c[2,2]/6, 
                    c[0,1]/4 - c[0,2]/6 - c[2,1]/6 + c[2,2]/4], 
                   [c[1,0]/4 + c[1,2]/6 - c[2,0]/3 - c[2,2]/4, 
                    c[1,1]/6 + c[1,2]/4 - c[2,1]/4 - c[2,2]/3, 
                    -c[1,0]/4 + c[1,2]/3 + c[2,0]/3 - c[2,2]/4, 
                    c[1,1]/3 - c[1,2]/4 - c[2,1]/4 + c[2,2]/3, 
                    -c[1,0]/4 - c[1,2]/3 + c[2,0]/6 + c[2,2]/4, 
                    -c[1,1]/3 - c[1,2]/4 + c[2,1]/4 + c[2,2]/6, 
                    c[1,0]/4 - c[1,2]/6 - c[2,0]/6 + c[2,2]/4, 
                    -c[1,1]/6 + c[1,2]/4 + c[2,1]/4 - c[2,2]/6], 
                   [-c[0,0]/6 - c[0,2]/4 - c[2,0]/4 - c[2,2]/6, 
                    -c[0,1]/4 - c[0,2]/6 - c[2,1]/6 - c[2,2]/4, 
                    c[0,0]/6 - c[0,2]/4 + c[2,0]/4 - c[2,2]/3, 
                    -c[0,1]/4 + c[0,2]/6 - c[2,1]/3 + c[2,2]/4, 
                    c[0,0]/3 + c[0,2]/4 + c[2,0]/4 + c[2,2]/3, 
                    c[0,1]/4 + c[0,2]/3 + c[2,1]/3 + c[2,2]/4, 
                    -c[0,0]/3 + c[0,2]/4 - c[2,0]/4 + c[2,2]/6, 
                    c[0,1]/4 - c[0,2]/3 + c[2,1]/6 - c[2,2]/4], 
                   [-c[1,0]/4 - c[1,2]/6 - c[2,0]/6 - c[2,2]/4, 
                    -c[1,1]/6 - c[1,2]/4 - c[2,1]/4 - c[2,2]/6, 
                    c[1,0]/4 - c[1,2]/3 + c[2,0]/6 - c[2,2]/4, 
                    -c[1,1]/3 + c[1,2]/4 - c[2,1]/4 + c[2,2]/6, 
                    c[1,0]/4 + c[1,2]/3 + c[2,0]/3 + c[2,2]/4, 
                    c[1,1]/3 + c[1,2]/4 + c[2,1]/4 + c[2,2]/3, 
                    -c[1,0]/4 + c[1,2]/6 - c[2,0]/3 + c[2,2]/4, 
                    c[1,1]/6 - c[1,2]/4 + c[2,1]/4 - c[2,2]/3], 
                   [c[0,0]/6 + c[0,2]/4 - c[2,0]/4 - c[2,2]/3, 
                    c[0,1]/4 + c[0,2]/6 - c[2,1]/3 - c[2,2]/4, 
                    -c[0,0]/6 + c[0,2]/4 + c[2,0]/4 - c[2,2]/6, 
                    c[0,1]/4 - c[0,2]/6 - c[2,1]/6 + c[2,2]/4, 
                    -c[0,0]/3 - c[0,2]/4 + c[2,0]/4 + c[2,2]/6, 
                    -c[0,1]/4 - c[0,2]/3 + c[2,1]/6 + c[2,2]/4, 
                    c[0,0]/3 - c[0,2]/4 - c[2,0]/4 + c[2,2]/3, 
                    -c[0,1]/4 + c[0,2]/3 + c[2,1]/3 - c[2,2]/4], 
                   [-c[1,0]/4 - c[1,2]/3 + c[2,0]/6 + c[2,2]/4, 
                    -c[1,1]/3 - c[1,2]/4 + c[2,1]/4 + c[2,2]/6, 
                    c[1,0]/4 - c[1,2]/6 - c[2,0]/6 + c[2,2]/4, 
                    -c[1,1]/6 + c[1,2]/4 + c[2,1]/4 - c[2,2]/6, 
                    c[1,0]/4 + c[1,2]/6 - c[2,0]/3 - c[2,2]/4, 
                    c[1,1]/6 + c[1,2]/4 - c[2,1]/4 - c[2,2]/3, 
                    -c[1,0]/4 + c[1,2]/3 + c[2,0]/3 - c[2,2]/4, 
                    c[1,1]/3 - c[1,2]/4 - c[2,1]/4 + c[2,2]/3]])
    return Ke