from numpy import array,prod,zeros
from numpy.testing import assert_equal

from topoptlab.gmg import create_coarse_inds

import pytest

@pytest.mark.parametrize('nelx, nely, nelz, ndof, solution',
                         [(4,6,None,1,
                           array([ 0, 2, 4, 10, 12, 14, 20, 22, 24, 30, 32, 
                                  34])),
                          (4,6,None,2,
                           array([0, 1, 4, 5, 8, 9, 20, 21, 24, 25, 28, 29, 40, 
                                  41, 44, 45, 48, 49, 60, 61, 64, 65, 68, 69])),
                          (4,6,8,1, 
                           array([0, 2, 4, 10, 12, 14, 20, 22, 24, 30, 32, 34, 
                                  70, 72, 74, 80, 82, 84, 90, 92, 94, 100, 102, 
                                  104, 140, 142, 144, 150, 152, 154, 160, 162, 
                                  164, 170, 172, 174, 210, 212, 214, 220, 222, 
                                  224, 230, 232, 234, 240, 242, 244, 280, 282, 
                                  284, 290, 292, 294, 300, 302, 304, 310, 312, 
                                  314])),
                          (4,6,8,3, 
                           array([0, 1, 2, 6, 7, 8, 12, 13, 14, 30, 31, 32, 36,
                                  37, 38, 42, 43, 44, 60, 61, 62, 66, 67, 68, 
                                  72, 73, 74, 90, 91, 92, 96, 97, 98, 102, 103, 
                                  104, 210, 211, 212, 216, 217, 218, 222, 223, 
                                  224, 240, 241, 242, 246, 247, 248, 252, 253, 
                                  254, 270, 271, 272, 276, 277, 278, 282, 283, 
                                  284, 300, 301, 302, 306, 307, 308, 312, 313, 
                                  314, 420, 421, 422, 426, 427, 428, 432, 433, 
                                  434, 450, 451, 452, 456, 457, 458, 462, 463, 
                                  464, 480, 481, 482, 486, 487, 488, 492, 493, 
                                  494, 510, 511, 512, 516, 517, 518, 522, 523, 
                                  524, 630, 631, 632, 636, 637, 638, 642, 643, 
                                  644, 660, 661, 662, 666, 667, 668, 672, 673, 
                                  674, 690, 691, 692, 696, 697, 698, 702, 703, 
                                  704, 720, 721, 722, 726, 727, 728, 732, 733,
                                  734, 840, 841, 842, 846, 847, 848, 852, 853, 
                                  854, 870, 871, 872, 876, 877, 878, 882, 883, 
                                  884, 900, 901, 902, 906, 907, 908, 912, 913, 
                                  914, 930, 931, 932, 936, 937, 938, 942, 943, 
                                  944]))])

def test_coarse_inds(nelx,nely,nelz,ndof,solution):
    #
    coarse_inds = create_coarse_inds(nelx=nelx,nely=nely,nelz=nelz,ndof=ndof)
    #
    assert_equal(coarse_inds, solution)
    return

from topoptlab.gmg import create_coarse_mask

@pytest.mark.parametrize('nelx, nely, nelz, ndof, solution',
                         [(4,6,None,1,
                           array([ 0, 2, 4, 10, 12, 14, 20, 22, 24, 30, 32, 
                                  34])),
                          (4,6,None,2,
                           array([0, 1, 4, 5, 8, 9, 20, 21, 24, 25, 28, 29, 40, 
                                  41, 44, 45, 48, 49, 60, 61, 64, 65, 68, 69])),
                          (4,6,8,1, 
                           array([0, 2, 4, 10, 12, 14, 20, 22, 24, 30, 32, 34, 
                                  70, 72, 74, 80, 82, 84, 90, 92, 94, 100, 102, 
                                  104, 140, 142, 144, 150, 152, 154, 160, 162, 
                                  164, 170, 172, 174, 210, 212, 214, 220, 222, 
                                  224, 230, 232, 234, 240, 242, 244, 280, 282, 
                                  284, 290, 292, 294, 300, 302, 304, 310, 312, 
                                  314])),
                          (4,6,8,3, 
                           array([0, 1, 2, 6, 7, 8, 12, 13, 14, 30, 31, 32, 36,
                                  37, 38, 42, 43, 44, 60, 61, 62, 66, 67, 68, 
                                  72, 73, 74, 90, 91, 92, 96, 97, 98, 102, 103, 
                                  104, 210, 211, 212, 216, 217, 218, 222, 223, 
                                  224, 240, 241, 242, 246, 247, 248, 252, 253, 
                                  254, 270, 271, 272, 276, 277, 278, 282, 283, 
                                  284, 300, 301, 302, 306, 307, 308, 312, 313, 
                                  314, 420, 421, 422, 426, 427, 428, 432, 433, 
                                  434, 450, 451, 452, 456, 457, 458, 462, 463, 
                                  464, 480, 481, 482, 486, 487, 488, 492, 493, 
                                  494, 510, 511, 512, 516, 517, 518, 522, 523, 
                                  524, 630, 631, 632, 636, 637, 638, 642, 643, 
                                  644, 660, 661, 662, 666, 667, 668, 672, 673, 
                                  674, 690, 691, 692, 696, 697, 698, 702, 703, 
                                  704, 720, 721, 722, 726, 727, 728, 732, 733,
                                  734, 840, 841, 842, 846, 847, 848, 852, 853, 
                                  854, 870, 871, 872, 876, 877, 878, 882, 883, 
                                  884, 900, 901, 902, 906, 907, 908, 912, 913, 
                                  914, 930, 931, 932, 936, 937, 938, 942, 943, 
                                  944]))])

def test_coarse_mask(nelx,nely,nelz,ndof,solution):
    #
    if nelz is None:
        n = prod( (ndof,nelx+1,nely+1))
    else:
        n = prod( (ndof,nelx+1,nely+1,nelz+1))
    mask = zeros(n, dtype=bool )
    mask[solution] = True
    #
    coarse_mask = create_coarse_mask(nelx=nelx,nely=nely,nelz=nelz,ndof=ndof)
    #
    assert_equal(coarse_mask, mask)
    return
