from numpy import array,prod,zeros
from numpy.testing import assert_equal

from topoptlab.gmg import create_coarse_inds

import pytest

@pytest.mark.parametrize('nelx, nely, nelz, ndof, stride, solution',
                         [(4,6,None,1,2,
                           array([0, 2, 4, 6, 14, 16, 18, 20, 28, 30, 32, 34])),
                          (4,6,None,2,2,
                           array([0, 1, 4, 5, 8, 9, 12, 13, 
                                  28, 29, 32, 33, 36, 37, 40, 41, 
                                  56, 57, 60, 61, 64, 65, 68, 69])),
                          (4,6,8,1,2,
                           array([0, 2, 4, 6, 
                                  14, 16, 18, 20, 
                                  28, 30, 32, 34, 
                                  70, 72, 74, 76, 
                                  84, 86, 88, 90, 
                                  98, 100, 102, 104, 
                                  140, 142, 144, 146, 
                                  154, 156, 158, 160, 
                                  168, 170, 172, 174, 
                                  210, 212, 214, 216, 
                                  224, 226, 228, 230, 
                                  238, 240, 242, 244, 
                                  280, 282, 284, 286, 
                                  294, 296, 298, 300, 
                                  308,  310, 312, 314])),
                          (4,6,8,3,2,
                           array([0, 1, 2, 6, 7, 8, 12, 13, 14, 18, 19, 20, 
                                  42, 43, 44, 48, 49, 50, 54, 55, 56, 60, 61, 
                                  62, 
                                  84, 85, 86, 90, 91, 92, 96, 97, 98, 102, 103, 
                                  104, 
                                  210, 211, 212, 216, 217, 218, 222, 223, 224, 
                                  228, 229, 230, 
                                  252, 253, 254, 258, 259, 260, 264, 265, 266, 
                                  270, 271, 272, 
                                  294, 295, 296, 300, 301, 302, 306, 307, 308, 
                                  312, 313, 314, 
                                  420, 421, 422, 426, 427, 428, 432, 433, 434, 
                                  438, 439, 440, 
                                  462, 463, 464, 468, 469, 470, 474, 475, 476, 
                                  480, 481, 482, 
                                  504, 505, 506, 510, 511, 512, 516, 517, 518, 
                                  522, 523, 524, 
                                  630, 631, 632, 636, 637, 638, 642, 643, 644,
                                  648, 649, 650, 
                                  672, 673, 674, 678, 679, 680, 684, 685, 686, 
                                  690, 691, 692, 
                                  714, 715, 716, 720, 721, 722, 726, 727, 728, 
                                  732, 733, 734, 
                                  840, 841, 842, 846, 847, 848, 852, 853, 854, 
                                  858, 859, 860,
                                  882, 883, 884, 888, 889, 890, 894, 895, 896, 
                                  900, 901, 902, 
                                  924, 925, 926, 930, 931, 932, 936, 937, 938, 
                                  942, 943, 944])),
                           (4,6,None,1,(4,6),
                            array([0, 6, 28, 34])),
                           (4,6,None,2,(4,6),
                            array([0, 1, 12, 13,
                                   56, 57, 68, 69])),
                           (4,6,8,1,(4,6,8),
                            array([0, 6, 
                                   28, 34, 
                                   280, 286, 
                                   308, 314])),
                           (4,6,8,3,(4,6,8),
                            array([0, 1, 2, 18, 19, 20, 
                                   84, 85, 86, 102, 103, 104, 
                                   840, 841, 842, 858, 859, 860,
                                   924, 925, 926, 942, 943, 944]))
                           ])

def test_coarse_inds(nelx,nely,nelz,ndof,stride,solution):
    #
    coarse_inds = create_coarse_inds(nelx=nelx, nely=nely, nelz=nelz,
                                     ndof=ndof, stride=stride)
    #
    assert_equal(coarse_inds, solution)
    return

from topoptlab.gmg import create_coarse_mask

@pytest.mark.parametrize('nelx, nely, nelz, ndof, stride, solution',
                         [(4,6,None,1,2,
                           array([0, 2, 4, 6, 14, 16, 18, 20, 28, 30, 32, 34])),
                          (4,6,None,2,2,
                           array([0, 1, 4, 5, 8, 9, 12, 13, 
                                  28, 29, 32, 33, 36, 37, 40, 41, 
                                  56, 57, 60, 61, 64, 65, 68, 69])),
                          (4,6,8,1,2,
                           array([0, 2, 4, 6, 
                                  14, 16, 18, 20, 
                                  28, 30, 32, 34, 
                                  70, 72, 74, 76, 
                                  84, 86, 88, 90, 
                                  98, 100, 102, 104, 
                                  140, 142, 144, 146, 
                                  154, 156, 158, 160, 
                                  168, 170, 172, 174, 
                                  210, 212, 214, 216, 
                                  224, 226, 228, 230, 
                                  238, 240, 242, 244, 
                                  280, 282, 284, 286, 
                                  294, 296, 298, 300, 
                                  308,  310, 312, 314])),
                          (4,6,8,3,2,
                           array([0, 1, 2, 6, 7, 8, 12, 13, 14, 18, 19, 20, 
                                  42, 43, 44, 48, 49, 50, 54, 55, 56, 60, 61, 
                                  62, 
                                  84, 85, 86, 90, 91, 92, 96, 97, 98, 102, 103, 
                                  104, 
                                  210, 211, 212, 216, 217, 218, 222, 223, 224, 
                                  228, 229, 230, 
                                  252, 253, 254, 258, 259, 260, 264, 265, 266, 
                                  270, 271, 272, 
                                  294, 295, 296, 300, 301, 302, 306, 307, 308, 
                                  312, 313, 314, 
                                  420, 421, 422, 426, 427, 428, 432, 433, 434, 
                                  438, 439, 440, 
                                  462, 463, 464, 468, 469, 470, 474, 475, 476, 
                                  480, 481, 482, 
                                  504, 505, 506, 510, 511, 512, 516, 517, 518, 
                                  522, 523, 524, 
                                  630, 631, 632, 636, 637, 638, 642, 643, 644,
                                  648, 649, 650, 
                                  672, 673, 674, 678, 679, 680, 684, 685, 686, 
                                  690, 691, 692, 
                                  714, 715, 716, 720, 721, 722, 726, 727, 728, 
                                  732, 733, 734, 
                                  840, 841, 842, 846, 847, 848, 852, 853, 854, 
                                  858, 859, 860,
                                  882, 883, 884, 888, 889, 890, 894, 895, 896, 
                                  900, 901, 902, 
                                  924, 925, 926, 930, 931, 932, 936, 937, 938, 
                                  942, 943, 944])),
                           (4,6,None,1,(4,6),
                            array([0, 6, 28, 34])),
                           (4,6,None,2,(4,6),
                            array([0, 1, 12, 13,
                                   56, 57, 68, 69])),
                           (4,6,8,1,(4,6,8),
                            array([0, 6, 
                                   28, 34, 
                                   280, 286, 
                                   308, 314])),
                           (4,6,8,3,(4,6,8),
                            array([0, 1, 2, 18, 19, 20, 
                                   84, 85, 86, 102, 103, 104, 
                                   840, 841, 842, 858, 859, 860,
                                   924, 925, 926, 942, 943, 944])),])

def test_coarse_mask(nelx,nely,nelz,ndof,stride,solution):
    #
    if nelz is None:
        n = prod( (ndof,nelx+1,nely+1))
    else:
        n = prod( (ndof,nelx+1,nely+1,nelz+1))
    mask = zeros(n, dtype=bool )
    mask[solution] = True
    #
    coarse_mask = create_coarse_mask(nelx=nelx,nely=nely,nelz=nelz,
                                     ndof=ndof,stride=stride)
    #
    assert_equal(coarse_mask, mask)
    return
